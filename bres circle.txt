
#include <GL/glut.h>
#include<math.h>
#include<stdlib.h>
#include<iostream>
#include<stdio.h>
using namespace std;
void symmetry(double xc,double yc,double x,double y)
{
 glBegin(GL_POINTS);
 glVertex2i(xc+x, yc+y);
 glVertex2i(xc+x, yc-y);
 glVertex2i(xc+y, yc+x);
 glVertex2i(xc+y, yc-x);
 glVertex2i(xc-x, yc-y);
 glVertex2i(xc-y, yc-x);
 glVertex2i(xc-x, yc+y);
 glVertex2i(xc-y, yc+x);
 glEnd();

}
void circle(double x1,double y1,double r)
{
 int x=0,y=r;
 float pk=(5.0/4.0)-r;
 /* Plot the points */
 /* Plot the first point */
 symmetry(x1,y1,x,y);
 int k;
 /* Find all vertices till x=y */
 while(x < y)
 {
 x = x + 1;
 if(pk < 0)
 pk = pk + 2*x+1;
 else
 {
 y = y - 1;
 pk = pk + 2*(x - y) + 1;
 }
 symmetry(x1,y1,x,y);
 }
 glFlush();
}
 void display()
 {
 circle(200,200,120);
}
 void myInit(void)
{ 
	glClearColor(1.0,1.0,1.0,0.0);
 	glColor3f(1,1,1);
	glPointSize(2.0);
 	glMatrixMode(GL_PROJECTION);
 	glLoadIdentity();
 	gluOrtho2D(0.0,640.0,0.0,480.0);
}
int main(int argc,char **argv)
{
 glutInit(&argc,argv);
 glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
 glutInitWindowSize(640,480);
 glutInitWindowPosition(100,150);
 glutCreateWindow("Bresenham circle drawing algorithm");
 glutDisplayFunc(display);
 myInit();
 glutMainLoop();
 return 0;
}
